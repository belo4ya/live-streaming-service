package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/belo4ya/live-streaming-service/api/gqlgw/v1"
	"github.com/golang/protobuf/ptypes/empty"
)

// CreateStream is the resolver for the createStream field.
func (r *mutationResolver) CreateStream(ctx context.Context, input v1.NewStream) (*v1.Stream, error) {
	panic(fmt.Errorf("not implemented: CreateStream - createStream"))
}

// Streams is the resolver for the streams field.
func (r *queryResolver) Streams(ctx context.Context) ([]*v1.Stream, error) {
	resp, err := r.data.StreamC.ListStreams(ctx, &empty.Empty{})
	if err != nil {
		return nil, err
	}

	streams := make([]*v1.Stream, 0, len(resp.Results))
	for _, stream := range resp.Results {
		streams = append(streams, &v1.Stream{
			ID:        strconv.Itoa(int(stream.Id)),
			Name:      stream.Name,
			Username:  stream.Username,
			Viewers:   0,
			CreatedAt: time.Now().UTC(),
			UpdatedAt: time.Now().UTC(),
		})
	}
	return streams, nil
}

// Mutation returns v1.MutationResolver implementation.
func (r *Resolver) Mutation() v1.MutationResolver { return &mutationResolver{r} }

// Query returns v1.QueryResolver implementation.
func (r *Resolver) Query() v1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
